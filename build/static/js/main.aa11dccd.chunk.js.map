{"version":3,"sources":["logo.png","store/surveySlice.js","components/multi-select.js","components/single-select.js","components/create-survey.js","components/take-survey.js","components/confirm-survey.js","App.js","store/responseSlice.js","store/global-store.js","reportWebVitals.js","index.js"],"names":["createSurvey","createAsyncThunk","_","thunkAPI","a","newSurveyId","String","getState","surveys","length","surveySlice","createSlice","name","initialState","reducers","addQuestion","state","action","payload","surveyId","type","options","question","q","find","s","questions","qId","push","markPublished","isPublished","extraReducers","fulfilled","MultiSelect","useParams","history","useHistory","dispatch","useDispatch","useState","setOptions","setQuestion","isQuestionAddPublishDisabled","trim","undefined","opt","className","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","onChange","e","target","value","map","option","optionIdx","setOptionInArray","Button","onClick","newOptions","newOptionIdx","currentNewOptionIndex","addOption","disabled","splice","removeOption","actions","SingleSelect","CreateSurvey","query","useLocation","search","dropdownOpen","setDropdownOpen","dropdownText","setDropdownText","useEffect","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","TakeSurvey","surveyIDs","useSelector","globalStore","filter","ConfirmSurvey","survey","App","src","logo","alt","path","then","unwrapResult","to","responseSlice","increment","decrement","rootReducer","combineReducers","reducer","responses","store","configureStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa11dccd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.edddff74.png\";","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const createSurvey = createAsyncThunk(\n  \"surveys/createSurvey\",\n  async (_, thunkAPI) => {\n    const newSurveyId = String(thunkAPI.getState().surveys.length + 1);\n    return newSurveyId;\n  }\n);\n\nexport const surveySlice = createSlice({\n  name: \"surveys\",\n  initialState: [],\n  reducers: {\n    addQuestion: (state, action) => {\n      const { surveyId, type, options, question } = action.payload;\n      // console.log(state[0], state.find((s) => s.surveyId === surveyId));\n      const q = state.find((s) => s.surveyId === surveyId).questions;\n      const qId = String(q.length + 1);\n      q.push({\n        qId,\n        type,\n        question,\n        options,\n      });\n    },\n    markPublished: (state, action) => {\n      const { surveyId } = action.payload;\n      state.find((s) => s.surveyId === surveyId).isPublished = true;\n    }\n  },\n  extraReducers: {\n    [createSurvey.fulfilled]: (state, action) => {\n      state.push({\n        questions: [],\n        surveyId: action.payload,\n        isPublished: false,\n      });\n    },\n  },\n});\n","import {\n    Button,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Input,\n  } from \"reactstrap\";\n  import { useState } from \"react\";\n  import { useParams, useHistory } from \"react-router-dom\";\n  import { useDispatch } from \"react-redux\";\n  import { surveySlice } from \"../store/surveySlice\";\n  \n  function MultiSelect() {\n    const { surveyId } = useParams();\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [options, setOptions] = useState([\"\"]);\n    const [question, setQuestion] = useState(\"\");\n  \n    const addQuestionClickAction = () => {\n      const payload = {\n        options,\n        question,\n        surveyId,\n        type: \"multiple\",\n      };\n      dispatch(surveySlice.actions.addQuestion(payload));\n      history.push(\"/create/\" + surveyId + \"?clear=true\");\n    };\n  \n    const addOption = (optionIdx) => {\n      if (options.length < 4) {\n        const newOptions = [...options, \"\"];\n        const newOptionIdx = optionIdx + 1;\n        let currentNewOptionIndex = newOptions.length - 1;\n        while (newOptionIdx !== currentNewOptionIndex) {\n          // shift the data one index backward\n          newOptions[currentNewOptionIndex] =\n            newOptions[currentNewOptionIndex - 1];\n          currentNewOptionIndex--;\n          newOptions[currentNewOptionIndex] = \"\";\n        }\n        setOptions(newOptions);\n      }\n    };\n    const removeOption = (optionIdx) => {\n      if (options.length > 1) {\n        options.splice(optionIdx, 1);\n        setOptions([...options]);\n      }\n    };\n  \n    const setOptionInArray = (value, optionIdx) => {\n      options[optionIdx] = value;\n      setOptions([...options]);\n    };\n  \n    const isQuestionAddPublishDisabled = () =>\n      question.trim() === \"\" ||\n      options.find((opt) => opt.trim() === \"\") !== undefined;\n  \n    return (\n      <div className=\"question-container\">\n        <InputGroup className=\"input-grp\">\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>?</InputGroupText>\n          </InputGroupAddon>\n          <Input\n            placeholder=\"Your Question\"\n            onChange={(e) => setQuestion(e.target.value)}\n            value={question}\n          />\n        </InputGroup>\n        <p className=\"options-text\">Options</p>\n        {options.map((option, optionIdx) => (\n          <InputGroup className=\"input-grp\" key={optionIdx}>\n            <Input\n              placeholder={`Option ${optionIdx + 1}`}\n              value={option}\n              onChange={(e) => setOptionInArray(e.target.value, optionIdx)}\n            />\n            <InputGroupAddon addonType=\"append\">\n              <Button\n                onClick={() => addOption(optionIdx)}\n                disabled={options.length === 4}\n              >\n                +\n              </Button>\n              <Button\n                onClick={() => removeOption(optionIdx)}\n                disabled={options.length === 1}\n              >\n                -\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        ))}\n  \n        {options.length === 4 ? (\n          <div className=\"question-buttons\">\n            <Button\n              className=\"survey-main-btn\"\n              disabled={isQuestionAddPublishDisabled()}\n              onClick={addQuestionClickAction}\n            >\n              Add Question\n            </Button>\n            <Button\n              className=\"survey-main-btn\"\n              disabled={isQuestionAddPublishDisabled()}\n            >\n              Publish\n            </Button>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n  \n  export default MultiSelect;\n  ","import { useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { surveySlice } from \"../store/surveySlice\";\nimport {\n  Button,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n} from \"reactstrap\";\n\nfunction SingleSelect() {\n  const { surveyId } = useParams();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [options, setOptions] = useState([\"\", \"\"]);\n  const [question, setQuestion] = useState(\"\");\n\n  const setOptionInArray = (value, optionIdx) => {\n    options[optionIdx] = value;\n    setOptions([...options]);\n  };\n\n  const isQuestionAddPublishDisabled = () =>\n    question.trim() === \"\" ||\n    options.find((opt) => opt.trim() === \"\") !== undefined;\n\n  const addQuestionClickAction = () => {\n    const payload = {\n      options,\n      question,\n      surveyId,\n      type: \"single\"\n    };\n    dispatch(surveySlice.actions.addQuestion(payload));\n    history.push('/create/' + surveyId + '?clear=true');\n  }\n\n  const publishQuestion = () => {\n    const payload = {\n      options,\n      question,\n      surveyId,\n      type: \"single\"\n    };\n    dispatch(surveySlice.actions.addQuestion(payload));\n    history.push('/confirm/' + surveyId);\n  }\n\n  return (\n    <div className=\"question-container\">\n      <InputGroup className=\"input-grp\">\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>?</InputGroupText>\n        </InputGroupAddon>\n        <Input\n          placeholder=\"Your Question\"\n          onChange={(e) => setQuestion(e.target.value)}\n          value={question}\n        />\n      </InputGroup>\n      <p className=\"options-text\">Options</p>\n      <InputGroup className=\"input-grp\">\n        <Input\n          placeholder=\"Option 1\"\n          value={options[0]}\n          onChange={(e) => setOptionInArray(e.target.value, 0)}\n        />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>+</InputGroupText>\n          <InputGroupText>-</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <InputGroup className=\"input-grp\">\n        <Input\n          placeholder=\"Option 2\"\n          value={options[1]}\n          onChange={(e) => setOptionInArray(e.target.value, 1)}\n        />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>+</InputGroupText>\n          <InputGroupText>-</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <div className=\"question-buttons\">\n        <Button\n          className=\"survey-main-btn\"\n          disabled={isQuestionAddPublishDisabled()}\n          onClick={addQuestionClickAction}\n        >\n          Add Question\n        </Button>\n        <Button\n          className=\"survey-main-btn\"\n          disabled={isQuestionAddPublishDisabled()}\n          onClick={publishQuestion}\n        >\n          Publish\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default SingleSelect;\n","import React, { useState, useEffect } from \"react\";\nimport MultiSelect from \"./multi-select\";\nimport SingleSelect from \"./single-select\";\nimport { useParams, useLocation, useHistory } from \"react-router-dom\";\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\n\nfunction CreateSurvey() {\n  const { surveyId } = useParams();\n  const query = useLocation().search;\n  const history = useHistory();\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownText, setDropdownText] = useState(\"Select Question Type\");\n\n  useEffect(() => {\n    if(query === '?clear=true') {\n      setDropdownText(\"Select Question Type\");\n      history.push('/create/' + surveyId);\n    }\n\n  }, [query, history, surveyId]);\n\n  const toggle = () => setDropdownOpen((prevState) => !prevState);\n\n  return (\n    <>\n      <p>\n        Survey ID: <b>{surveyId}</b>\n      </p>\n      <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle caret>{dropdownText}</DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem\n            onClick={() => setDropdownText(\"Multi Select Question\")}\n          >\n            Multi Select Question\n          </DropdownItem>\n          <DropdownItem\n            onClick={() => setDropdownText(\"Single Select Question\")}\n          >\n            Single Select Question\n          </DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      {dropdownText === \"Multi Select Question\" ? <MultiSelect /> : null}\n      {dropdownText === \"Single Select Question\" ? <SingleSelect /> : null}\n    </>\n  );\n}\n\nexport default CreateSurvey;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Button } from \"reactstrap\";\n\nfunction TakeSurvey() {\n  const surveyIDs = useSelector((globalStore) =>\n    globalStore.surveys.filter((s) => s.isPublished).map((s) => s.surveyId)\n  );\n\n  return (\n    <>\n      {surveyIDs.map((surveyId) => (\n        <Button className=\"survey-main-btn\" key={surveyId}>\n          Take Survey {surveyId}\n        </Button>\n      ))}\n    </>\n  );\n}\n\nexport default TakeSurvey;\n","import React from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { surveySlice } from \"../store/surveySlice\";\n\nfunction ConfirmSurvey() {\n  const { surveyId } = useParams();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const survey = useSelector((globalStore) =>\n    globalStore.surveys.find((s) => s.surveyId === surveyId)\n  );\n\n  const confirmAndPublishSurvey = () => {\n    dispatch(surveySlice.actions.markPublished({ surveyId }));\n    history.push(\"/\");\n  };\n\n  return (\n    <>\n      {survey.questions.map((q) => (\n        <>\n          <h4>{q.question}</h4>\n          {q.type === \"single\" ? (\n            <>\n              <label>{q.options[0]}</label>\n              <input type=\"radio\" />\n              <label>{q.options[1]}</label>\n              <input type=\"radio\" />\n            </>\n          ) : (\n            <>\n              <label>{q.options[0]}</label>\n              <input type=\"checkbox\" />\n              <label>{q.options[1]}</label>\n              <input type=\"checkbox\" />\n              <label>{q.options[2]}</label>\n              <input type=\"checkbox\" />\n              <label>{q.options[3]}</label>\n              <input type=\"checkbox\" />\n            </>\n          )}\n          <hr/>\n        </>\n      ))}\n      <Button className=\"survey-main-btn\" onClick={confirmAndPublishSurvey}>\n        Confirm Survey\n      </Button>\n    </>\n  );\n}\n\nexport default ConfirmSurvey;\n","import logo from \"./logo.png\";\nimport { Button } from \"reactstrap\";\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\nimport CreateSurvey from \"./components/create-survey\";\nimport TakeSurvey from \"./components/take-survey\";\nimport ConfirmSurvey from \"./components/confirm-survey\";\nimport { useDispatch } from \"react-redux\";\nimport { createSurvey } from \"./store/surveySlice\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const redirectToNewSurvey = () => {\n    // dispatch the action for creating a new survey\n    // console.log(\"action\", surveySlice.actions.createSurvey({random: 32}));\n\n    dispatch(createSurvey())\n      .then(unwrapResult)\n      .then((newSurveyId) => history.push(\"/create/\" + newSurveyId));\n\n    // equivalent to below line\n    // dispatch({ type: 'surveys/crateSurvey', payload: })\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/create/:surveyId\">\n          <CreateSurvey />\n        </Route>\n        <Route path=\"/confirm/:surveyId\">\n          <ConfirmSurvey />\n        </Route>\n        <Route path=\"/take\">\n          <TakeSurvey />\n        </Route>\n        <Route path=\"/\">\n          <Button className=\"survey-main-btn\" onClick={redirectToNewSurvey}>\n            Create Survey\n          </Button>\n          <Link to=\"/take\">\n            <Button className=\"survey-main-btn\">Take Survey</Button>\n          </Link>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const responseSlice = createSlice({\n    name: \"counter\",\n    initialState: 0,\n    reducers: {\n      increment: state => state + 1,\n      decrement: state => state - 1\n    }\n  });","import { combineReducers } from \"redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { surveySlice } from \"./surveySlice\";\nimport { responseSlice } from \"./responseSlice\";\n\nconst rootReducer = combineReducers({\n  surveys: surveySlice.reducer,\n  responses: responseSlice.reducer,\n});\n\nexport const store = configureStore({ reducer: rootReducer });\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/global-store\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}